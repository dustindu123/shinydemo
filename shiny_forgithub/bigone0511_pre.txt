####################
##all the possible cases
#####
ui <- fluidPage(sidebarLayout(
    sidebarPanel(navlistPanel(
        #widths = c(12, 12), "SidebarMenu",
        #tabPanel(selectizeInput('case', 'Pick a case', selected="A", choices = c("A", "B"), multiple = FALSE)),
        #tabPanel(numericInput('num', 'Number', min = 1, max = 10, value = 1, step = 1))
     sidebarMenu(
      menuItem("基本信息", tabName = "基本信息", icon = icon("dashboard")),
      menuItem("模型类评分", tabName = "模型类评分", icon = icon("dashboard")),
      menuItem("收入&资产", tabName = "收入&资产", icon = icon("dashboard"))
    )

       
    )),
    mainPanel(navbarPage(title = "nav w/ sidebarMenu",
                         
                         tabPanel(h4("Perspective 1"),
                                  tabsetPanel(
                                      tabPanel("Subtab 1.1",
                                               plotOutput("plot11")),
                                      tabPanel("Subtab 1.2")
                                  )),
                         tabPanel(h4("Perspective 2"),
                                  tabsetPanel(
                                      tabPanel("Subtab 2.1"),
                                      tabPanel("Subtab 2.2")
                                  )))
              
    )
))

server <- function(input, output) {
  output$plot11 <- renderPlot({
    hist(rnorm(cases[[input$case]][input$num]))
  })
}

shinyApp(ui, server)
########################

 ui <- fluidPage(
    fluidRow(
      column(3, navlistPanel(
        widths = c(12, 12), "SidebarMenu",
        tabPanel(selectizeInput('case', 'Pick a case', selected="A", choices = c("A", "B"), multiple = FALSE)),
        tabPanel(numericInput('num', 'Number', min = 1, max = 10, value = 1, step = 1))
      )),
      column(9,  navbarPage(title = "nav w/ sidebarMenu",

                             tabPanel(h4("Perspective 1"),
                                      tabsetPanel(
                                        tabPanel("Subtab 1.1",
                                                 plotOutput("plot11")),
                                        tabPanel("Subtab 1.2")
                                      )),
                             tabPanel(h4("Perspective 2"),
                                      tabsetPanel(
                                        tabPanel("Subtab 2.1"),
                                        tabPanel("Subtab 2.2")
                                      ))))


    )
      )

      server <- function(input, output) {
  output$plot11 <- renderPlot({
    hist(rnorm(cases[[input$case]][input$num]))
  })
}

shinyApp(ui, server)

####################
ui <- navbarPage('test',id='test',
                 tabPanel('my app1',
                          titlePanel("Old Faithful Geyser Data1"),
                          sidebarLayout(
                            sidebarPanel(
                              sliderInput("bins",
                                          "Number of bins:",
                                          min = 1,
                                          max = 50,
                                          value = 30)),
                            mainPanel(plotOutput("distPlot1")))),
                 tabPanel('my app2',
                          titlePanel("Old Faithful Geyser Data2"),
                          sidebarLayout(
                            sidebarPanel(
                              sliderInput("bins",
                                          "Number of bins:",
                                          min = 1,
                                          max = 50,
                                          value = 30)),
                            mainPanel(plotOutput("distPlot2")))),
                 tabPanel( value= "search_panel",
                           textInput("search", label=NULL, value="Search"))
                )

server <- function(input, output, session) {
  observe({
    if(!is.null(input$test)){
      if(input$test=="search_panel")     # Go back to last active panel
        updateNavbarPage(session, 'test', selected = selected_panel)
      else                               # Save active panel
        selected_panel <<- input$test
      }
    })
  searchtext <- reactive({
    if(!is.null(input$search))
       if(input$search!="Search")
         return(input$search)
    return(NULL)
    })
  output$distPlot1 <- renderPlot({
    x    <- faithful[, 2]
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x, breaks = bins, col = 'darkgray', border = 'white', 
         main=ifelse(is.null(searchtext()), "Alt title 1", searchtext()))
    })
  output$distPlot2 <- renderPlot({
    x    <- faithful[, 2]
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x, breaks = bins, col = 'darkgray', border = 'white', 
         main=ifelse(is.null(searchtext()), "Alt title 2", searchtext()))
    })
}

shinyApp(ui, server)

##########################################################
dashboardPage(
  dashboardHeader(title = "深圳道路的数据画像",titleWidth = 220),
  dashboardSidebar(
    sidebarMenu(
    menuItem(iconv("实时路况展示",to="UTF-8"), tabName = "realtime_traffic", icon = icon("road")),
    radioButtons(inputId = "choose_direction", label = "请选择一个方向：",selected=1,choiceNames=c("1（东->西 或 北->南）","2（西->东 或 南->北）"),choiceValues=1:2),
    radioButtons(inputId = "rank_class", label = "请选择道路排名类别：",selected="拥堵排名",choices=c("拥堵排名","通畅排名")),
    numericInput(inputId = "rank_num",label = "请输入道路交通排名数量：",min = 5,max = 100,step = 1,value=20),
    menuItem(iconv("道路画像分析",to="UTF-8"), icon = icon("area-chart"), tabName = "statistics"),
    selectInput(inputId = "choose_road",label = "请选择一条道路：",choices = all_roads),
    radioButtons(inputId = "choose_direction2", label = "请选择一个方向：",selected=1,choiceNames=c("1（东->西 或 北->南）","2（西->东 或 南->北）"),choiceValues=1:2),
    menuItem(iconv("历史路况回顾",to="UTF-8"), icon = icon("calendar"), tabName = "history"),
    dateInput(inputId = "choose_date", label = "请选择4月的一天：",value = "2017-04-01",min = "2017-04-01",max = "2017-04-30"),
    radioButtons(inputId = "choose_direction3", label = "请选择一个方向：",selected="东->西",choices=c("东->西","西->东","北->南","南->北")),
    radioButtons(inputId = "rank_class2", label = "请选择道路排名类别：",selected="拥堵排名",choices=c("拥堵排名","通畅排名")),
    numericInput(inputId = "rank_num2",label = "请输入道路交通排名数量：",min = 5,max = 100,step = 1,value=20),
    menuItem(iconv("实时数据下载",to="UTF-8"),tabName = "data_download",icon = icon("database"))
 ),width = 220),
  dashboardBody(
    tags$head(
      tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")),
    tabItems(
      tabItem("realtime_traffic",
              fluidRow(
                box(ggiraphOutput("map"),width = 12,solidHeader = T,collapsible = T)
              ),
              fluidRow(
                box(ggiraphOutput("rank1"),width = 6,solidHeader = T,collapsible = T),
                box(ggiraphOutput("rank2"),width = 6,solidHeader = T,collapsible = T)
              ),
              fluidRow(
                box(ggiraphOutput("rank3"),width = 6,solidHeader = T,collapsible = T),
                box(ggiraphOutput("rank4"),width = 6,solidHeader = T,collapsible = T)
              )
      ),
      tabItem("statistics",
              fluidRow(
                box(dygraphOutput("ts_history"),width = 12,solidHeader = T,collapsible = T)
                ),
              fluidRow(
                box(ggiraphOutput("heat"),width = 12,solidHeader = T,collapsible = T)
              ),
              fluidRow(
                box(ggiraphOutput("polar_weekdays"),width = 6,solidHeader = T,collapsible = T),
                box(ggiraphOutput("polar_holidays"),width = 6,solidHeader = T,collapsible = T)
              )
              ),
      tabItem("history",
              # fluidRow(
              #   box(img(src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3245526806,2208748886&fm=21&gp=0.jpg"),width = 12,solidHeader = T)
              # )),
              fluidRow(
                box(ggiraphOutput("history_bars"),width = 12,solidHeader = T,collapsible = T)
              ),
              fluidRow(
                box(ggiraphOutput("day_rank"),width = 12,solidHeader = T,collapsible = T)
              )),
      tabItem("data_download",
              fluidRow(
              box(
                dataTableOutput("rawdata"),width = 12
              )
              ),
              fluidRow(
                p("数据来源：",strong(a("深圳市交通运输委员会",href="http://sztocc.sztb.gov.cn/roadcongmore.aspx")))
              ),
              downloadButton("downloadCsv", "下载实时数据")
              )
      )
      ))

######################################################
function(input, output, session) {

  # Combine the selected variables into a new data frame
  selectedData <- reactive({
    iris[, c(input$xcol, input$ycol)]
  })

  clusters <- reactive({
    kmeans(selectedData(), input$clusters)
  })

  output$plot1 <- renderPlot({
    palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
      "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))

    par(mar = c(5.1, 4.1, 0, 1))
    plot(selectedData(),
         col = clusters()$cluster,
         pch = 20, cex = 3)
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
  })

}



pageWithSidebar(
  headerPanel('Iris k-means clustering'),
  sidebarPanel(
    selectInput('xcol', 'X Variable', names(iris)),
    selectInput('ycol', 'Y Variable', names(iris),
                selected=names(iris)[[2]]),
    numericInput('clusters', 'Cluster count', 3,
                 min = 1, max = 9)
  ),
  mainPanel(
    plotOutput('plot1')
  )
)
#####################################################
library(shiny)
library(openair)
library(ggplot2)
library(readr)


ui <- fluidPage(
  titlePanel("title"),

  sidebarLayout(
    sidebarPanel(
      selectInput("df","Choose a Site:",
                  choices = c(
                    "Site A" = 'SiteA',
                    "Site B" = 'SiteB')
      ),
       uiOutput("dateRange")


    ),
    mainPanel(
      strong(paste("Frequency Distribution:")),
      plotOutput("hist")
    )       
  )
)

server <- function(input, output, session) {
  df <- reactive({
    if(input$df == "SiteA"){
      date<- c("2017-01-01","2017-01-02","2017-01-03","2017-01-04")
      ws<-c(rep(0:3,1))
      SiteA <- data.frame(date,ws,stringsAsFactors = FALSE)
      x <- SiteA
    }
    if(input$df == "SiteB"){
      date<- c("2017-01-01","2017-01-02","2017-01-03",
                "2017-01-04","2017-01-05", "2017-01-06")
      ws<-c(rep(0:5,1))
      SiteB <- data.frame(date,ws,stringsAsFactors = FALSE)
      x <- SiteB
   }
      return(x)
  })



  output$dateRange <- renderUI({
    dateRangeInput("date", "Select the date range:",
                   start = 
    as.character(format(as.Date(min(df()$date))),"yyyy-mm-dd"), # Start 
                        end = 
    as.character(format(as.Date(max(df()$date))),"yyyy-mm-dd"), # End 
               min = 
    as.character(format(as.Date(min(df()$date))),"yyyy-mm-dd"),
               max = 
    as.character(format(as.Date(max(df()$date))),"yyyy-mm-dd"),
               format = "yyyy-mm-dd")

  })



  output$hist <- renderPlot({
    df <- df() # df is the user selected dataset
    dfhist<- subset(df, date >= as.Date(input$date[1]) & date <= 
                     as.Date(input$date[2]) )
    ggplot(dfhist, aes(dfhist$ws)) +
      geom_histogram(fill = "blue", bins = 50) +
      labs(x="Wind Speed (m/s)", y="Count")

  })


}

shinyApp(ui=ui, server = server)
#############################
library(shiny)
set.seed(123)

N<-500
M<-56

EF<- matrix( rnorm(N*M,mean=23,sd=3), N, M)
WM<- matrix( rnorm(N*M,mean=20,sd=3), N, M)
DP<- matrix( rnorm(N*M,mean=25,sd=3), N, M)

Date <- seq(as.Date("2018-01-01"), as.Date("2018-02-25"), by="days")
#Date <- as.POSIXct(Date, format = "%Y-%m-%d")

ui <- fluidPage(
  titlePanel(code(strong("Measures"), style = "color:black")),
  sidebarLayout(
    sidebarPanel(
      strong("Tools:"),
      selectInput("Test", 
                  label = "Choose a measure to display",
                  choices = c("EF", 
                              "WM",
                              "DP"
                  ),
                  selected = "EF"),

      dateRangeInput("DateRange", label= "Date Range:", start ="2018-01-01", end = "2018-02-25")),
    mainPanel(
      code(strong("Study Readout")),
      plotOutput("distPlot")
    ))
)

server <- function(input, output) {

  filterData <- reactive({
    x    <- switch(input$Test, 
                   "EF" = EF,
                   "WM" = WM, 
                   "DP" = DP)
    return(x)

  })

  output$distPlot <- renderPlot({
    x <-filterData()
    hist(x[Date >= min(input$DateRange) & Date <= max(input$DateRange)])
  })
}

shinyApp(ui = ui, server = server)